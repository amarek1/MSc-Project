import pandas as pd
import numpy as np
from global_functions import cm_analysis
import pickle
from global_functions import get_data
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
np.random.seed(7)

# load the data
file_name = 'data/satisfaction/satisfaction clean.pkl'
data = pd.read_pickle(file_name)

# get same train:test split as when training the model
# even out the data set -> 1:1 ratio of fraud and non fraud
X_train, X_test, y_train, y_test = get_data(real_data=data, synthetic_data=data,
                    nr_normal_training=381, nr_fraud_training=381, nr_synthetic_fraud_training=0, test_size=0.25)



############################# open models and get classification reports ########################


def get_performance_report(dataset='satisfaction', model_nr='rf', model_type='synthpop', nr_normal_training=[213224],
                           nr_fraud_training=[0], nr_synthetic_fraud_training=[0], test_size=0.25):
    model_dict = {}
    report_dict = {}  # report on recall, precision, etc.
    for i in range(0, len(nr_normal_training)):
        model_name = model_nr +'_'+ model_type +'_'+ str(nr_normal_training[i]) + '_'+str(nr_fraud_training[i]) + '_' + \
                     str(nr_synthetic_fraud_training[i]) +'_ts'+ str(test_size) + '.pkl'
        path = '4) performance improvement/' + dataset + '/real and synthetic/models/' + model_name

        with open(path, 'rb') as file:
            model = pickle.load(file)
        model_dict[model_name] = model

        model_predictions = model_dict[model_name].predict(X_test)
        model_predictions = [int(round(x)) for x in model_predictions]  # round to be 0 or 1

        report = classification_report(y_test, model_predictions, labels=[0,1],
                                       target_names=['class0', 'class1'], digits=2, output_dict=True)
        report_dict[model_name] = report

        # plot confusion matrix
        cm_analysis(y_test, model_predictions, filename='4) performance improvement/' + dataset + '/real and synthetic/figures/confusion matrices/cm_' + model_name + '.png',
                    labels=[0, 1], ymap=['class0', 'class1'], title='RF model trained on\n#class0: '+str(nr_normal_training[i])+' #class1: '+str(nr_fraud_training[i])+'\n'+'  #synthetic class1: '+str(nr_synthetic_fraud_training[i]))
        plt.close()
    return report_dict




############################# extract performance parameters and plot########################


# # plot real and sythetic fraud only plot
# def plot_performance3(x_axis_steps=[0, 100, 200, 300, 381], report_dict=dict(), fraud_par='fraud', normal_par='normal',
#                       parameter='recall', model='GAN'):
#
#     y_values = list()
#     keys = list(report_dict.keys())
#     for i in range(0, len(keys)):
#         y_values.append(report_dict[keys[i]][fraud_par][parameter])
#
#     for x, y in zip(x_axis_steps, y_values):
#         label = "{:.2f}".format(y)
#
#         plt.annotate(label,  # this is the text
#                      (x, y),  # this is the point to label
#                      textcoords="offset points",  # how to position the text
#                      xytext=(0, 2),  # distance from text to points (x,y)
#                      ha='center')
#
#     plt.plot(x_axis_steps, y_values, marker='o', label=parameter+' for class1')
#
#
#     y_values = list()
#     keys = list(report_dict.keys())
#     for i in range(0, len(keys)):
#         y_values.append(report_dict[keys[i]][normal_par][parameter])
#
#     for x, y in zip(x_axis_steps, y_values):
#         label = "{:.2f}".format(y)
#
#         plt.annotate(label,  # this is the text
#                      (x, y),  # this is the point to label
#                      textcoords="offset points",  # how to position the text
#                      xytext=(0, 2),  # distance from text to points (x,y)
#                      ha='center')
#
#     plt.plot(x_axis_steps, y_values, marker='o', label=parameter+' for class0')
#
#
#     plt.ylabel(parameter)
#     plt.xlabel('# synthetic fraud')
#     plt.title('The effect of adding synthetic satisfaction data\ngenerated by '+ model +' on '+parameter)
#     plt.grid()
#     plt.legend()
#     plt.savefig('4) performance improvement/satisfaction/real and synthetic/figures/plots/'+parameter+'_'+keys[len(keys)-1]+'.png')
#     plt.close()



f, a = plt.subplots(3, 4, figsize=(7, 5.5), sharey=True, sharex=True, constrained_layout=True)
# plot real and sythetic fraud only plot
def plot_performance3(x_axis_steps=[0, 100, 200, 300, 381], report_dict=dict(), fraud_par='fraud', normal_par='normal',
                      parameter='recall', model='GAN', fig_nr=[0,0], save=False):

    y_values = list()
    keys = list(report_dict.keys())
    for i in range(0, len(keys)):
        y_values.append(report_dict[keys[i]][fraud_par][parameter])


    a[fig_nr[0],fig_nr[1]].plot(x_axis_steps, y_values, marker='o', label=parameter+' for fraud')


    y_values = list()
    keys = list(report_dict.keys())
    for i in range(0, len(keys)):
        y_values.append(report_dict[keys[i]][normal_par][parameter])


    a[fig_nr[0],fig_nr[1]].plot(x_axis_steps, y_values, marker='o', label=parameter+' for normal')

    a[fig_nr[0],fig_nr[1]].set_title(model, fontsize=10)
    a[fig_nr[0],fig_nr[1]].grid()
    a[fig_nr[0],fig_nr[1]].set_xlabel("# class1 (x1000)", fontsize=9)
    a[fig_nr[0],fig_nr[1]].set_ylabel(parameter, fontsize=9)
    plt.setp(a, yticks=[0.4,0.6,0.8,1])
    plt.xticks(np.arange(0,5001,step=1000),('0','1','2','3','4','5'))
    plt.suptitle('The effect of adding synthetic satisfaction data generated\nby various methods on recall/precision')

    import matplotlib.lines as mlines
    blue_line = mlines.Line2D([], [], color='steelblue', marker='o',markersize=5, label='class1')
    orange_line = mlines.Line2D([], [], color='darkorange', marker='o',markersize=5, label='class0')
    f.legend(handles=[orange_line, blue_line],loc='upper left', fontsize='small')

    if save == True:
        f.savefig('4) performance improvement/satisfaction/real and synthetic/figures/plots/one_figure_for_all_precision&recall.png')
###################################### run the functions ###################################

synthpop_report = get_performance_report(model_nr='real&syn', model_type='synthpop',
                                         nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                         nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                         nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=synthpop_report, fraud_par='class1', normal_par='class0',
                      parameter='recall',model='synthpop', fig_nr=[0,0])



GAN_report = get_performance_report(model_nr='real&syn', model_type='GAN',
                                    nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                    nr_fraud_training = [3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                    nr_synthetic_fraud_training = [0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=GAN_report, fraud_par='class1', normal_par='class0',
                      parameter='recall', model='GAN', fig_nr=[0,2])



cGAN_report = get_performance_report(model_nr='real&syn', model_type='cGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=cGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='recall', model='cGAN', fig_nr=[1,0])



WGAN_report = get_performance_report(model_nr='real&syn', model_type='WGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=WGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='recall', model='WGAN', fig_nr=[1,2])



WcGAN_report = get_performance_report(model_nr='real&syn', model_type='WcGAN',
                                      nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                      nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                      nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=WcGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='recall', model='WcGAN', fig_nr=[2,0])



tGAN_report = get_performance_report(model_nr='real&syn', model_type='tGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=tGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='recall', model='tGAN', fig_nr=[2,2])





synthpop_report = get_performance_report(model_nr='real&syn', model_type='synthpop',
                                         nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                         nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                         nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=synthpop_report, fraud_par='class1', normal_par='class0',
                      parameter='precision',model='synthpop', fig_nr=[0,1])



GAN_report = get_performance_report(model_nr='real&syn', model_type='GAN',
                                    nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                    nr_fraud_training = [3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                    nr_synthetic_fraud_training = [0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=GAN_report, fraud_par='class1', normal_par='class0',
                      parameter='precision', model='GAN', fig_nr=[0,3])



cGAN_report = get_performance_report(model_nr='real&syn', model_type='cGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=cGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='precision', model='cGAN', fig_nr=[1,1])



WGAN_report = get_performance_report(model_nr='real&syn', model_type='WGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=WGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='precision', model='WGAN', fig_nr=[1,3])



WcGAN_report = get_performance_report(model_nr='real&syn', model_type='WcGAN',
                                      nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                      nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                      nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=WcGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='precision', model='WcGAN', fig_nr=[2,1])



tGAN_report = get_performance_report(model_nr='real&syn', model_type='tGAN',
                                     nr_normal_training=[8000, 8000, 8000, 8000, 8000, 8000, 8000],
                                     nr_fraud_training=[3008, 3008, 3008, 3008, 3008, 3008, 3008],
                                     nr_synthetic_fraud_training=[0, 500, 1000, 2000, 3000, 4000, 5000])

plot_performance3(x_axis_steps=[0, 500, 1000, 2000, 3000, 4000, 5000], report_dict=tGAN_report, fraud_par='class1', normal_par='class0',
                      parameter='precision', model='tGAN', fig_nr=[2,3], save=True)



